cmake_minimum_required(VERSION 3.15)
project(DistributedDataScience VERSION 1.0.0 LANGUAGES CXX)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Build type
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

# Compiler flags
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -O3")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -O0 -DDEBUG")

# Include directories
include_directories(${CMAKE_SOURCE_DIR}/include)

# Source files
file(GLOB_RECURSE CLIENT_SOURCES "src/client/*.cpp")
file(GLOB_RECURSE JOB_MANAGER_SOURCES "src/job_manager/*.cpp")
file(GLOB_RECURSE WORKER_SOURCES "src/worker/*.cpp")
file(GLOB_RECURSE ALGORITHMS_SOURCES "src/algorithms/*.cpp")
file(GLOB_RECURSE COMMUNICATION_SOURCES "src/communication/*.cpp")
file(GLOB_RECURSE STORAGE_SOURCES "src/storage/*.cpp")
file(GLOB_RECURSE UTILS_SOURCES "src/utils/*.cpp")

# Common library
add_library(dds_common STATIC
    ${UTILS_SOURCES}
    ${COMMUNICATION_SOURCES}
    ${STORAGE_SOURCES}
)

# Client executable
if(CLIENT_SOURCES)
    add_executable(dds_client ${CLIENT_SOURCES})
    target_link_libraries(dds_client dds_common)
endif()

# Job Manager executable
if(JOB_MANAGER_SOURCES)
    add_executable(dds_job_manager ${JOB_MANAGER_SOURCES})
    target_link_libraries(dds_job_manager dds_common)
endif()

# Worker executable
if(WORKER_SOURCES OR ALGORITHMS_SOURCES)
    add_executable(dds_worker ${WORKER_SOURCES} ${ALGORITHMS_SOURCES})
    target_link_libraries(dds_worker dds_common)
endif()

# Test executable
enable_testing()
file(GLOB_RECURSE TEST_SOURCES "tests/*.cpp")
if(TEST_SOURCES)
    add_executable(dds_tests ${TEST_SOURCES})
    target_link_libraries(dds_tests dds_common)
    add_test(NAME DDSTests COMMAND dds_tests)
endif()

# Print configuration summary
message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
message(STATUS "Building simplified version without external dependencies") 